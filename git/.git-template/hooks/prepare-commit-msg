#!/usr/bin/env python3
import functools
import operator
import os
import re
import sys

import git

jaq_branch_regex = re.compile(r'(?P<issue_id>^JAQ\d+)')

conflicts_regex = re.compile(r'(?P<space>\s*)$'
                             r'(?P<conflicts_block>\s+Conflicts:.*)$^\n',
                             re.MULTILINE | re.DOTALL | re.UNICODE)

match_values = operator.itemgetter('space', 'conflicts_block')

repo = git.Repo()


def _comment_conflicts(match):
    (space, conflict_block) = match_values(match.groupdict())
    lines = [space]
    for line in conflict_block.splitlines(False):
        if line.rstrip():
            lines.append('#{line}'.format(line=line))
    lines.append('')
    return os.linesep.join(lines)


comment_conflicts = functools.partial(conflicts_regex.sub, _comment_conflicts)

jaq_strapline = functools.partial(jaq_branch_regex.sub,
                                  '# Describe the issue:\n\g<issue_id>\n')


def format_pre_commit_msg(msg):
    return jaq_strapline(comment_conflicts(msg))


if __name__ == '__main__':
    commit_edit_msg_path = sys.argv[1]
    with open(commit_edit_msg_path, mode='r+') as fp:
        msg = fp.read()
        fp.seek(0)
        fp.write(format_pre_commit_msg(msg))
